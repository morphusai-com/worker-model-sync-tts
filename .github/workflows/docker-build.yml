name: Build Docker Image

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      push_to_registry:
        description: "Push image to ECR"
        required: false
        default: false
        type: boolean

permissions:
  id-token: write
  contents: read
  security-events: write

env:
  AWS_REGION: us-west-2
  ECR_REGISTRY: 084375548982.dkr.ecr.us-west-2.amazonaws.com
  ECR_REPOSITORY: worker-model-sync-tts

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set short SHA
        id: vars
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> "$GITHUB_ENV"

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::084375548982:role/github-oidc-provider-aws
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        run: |
          # 生成標籤
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          TIMESTAMP=$(date +'%Y%m%d%H%M%S')

          # 基礎標籤
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            TAGS="${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${VERSION}"
            TAGS="$TAGS,${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest"
          elif [[ "$BRANCH_NAME" == "main" ]]; then
            TAGS="${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest"
            TAGS="$TAGS,${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${SHORT_SHA}"
            TAGS="$TAGS,${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${TIMESTAMP}"
          else
            TAGS="${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${BRANCH_NAME}"
            TAGS="$TAGS,${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${BRANCH_NAME}-${SHORT_SHA}"
          fi

          echo "tags=$TAGS" >> $GITHUB_OUTPUT
          echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.meta.outputs.branch }}-${{ env.SHORT_SHA }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.SHORT_SHA }}
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"
          exit-code: '0'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: Push to Amazon ECR
        if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') || github.event.inputs.push_to_registry == 'true')
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64